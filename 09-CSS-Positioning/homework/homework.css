/*
Lección 3: Tarea de posicionamiento con CSS. Todo el trabajo debe hacerse en este archivo, por lo que si estás tocando cualquier otro
archivo en cualquiera de estas carpetas, estás en el lugar equivocado.
*/

/* Ejercicio 1: Centrar el texto en un span */
/*
En este primer ejercicio deberás asegurarte que el texto dentro de este &lt;span&gt;
          está centrado en la página. El id de este span es "ejercicioUno". El texto solo tiene un
          forma de alinear conocido como "text-align", para el cual podemos definir
          los valores "left", "right", "center" o "justify", pero esto solo funcion dentro de los elementos "block"
          y el &lt;span&gt; inicialmente es un elemento "inline". Define la propiedad "display" para
          que sea "block" y centra el texto usando "text-align".
*/

/* Arrancaremos este ejercicio por vos: */
#ejercicioUno {
      display:block;
      text-align: center;
}


/* Ejercicio 2: Posicionar el header */
/*
Hay una caja con un texto en la parte superior de la pantalla. 
Eso se supone que es un "placeholder" hasta que tengamos el título 
de la sección definido. Desafortunadamente no tenemos acceso
al HTML, por lo que no podemos ocultarlo modificando el HTML. 
Usando sólo CSS, asegúrate que la caja no
sea mostrada. El id de lo que tenes que ocultar es "ejercicioDos".
*/

/* Acá va tu código */
#ejercicioDos {
      display:none;

}


/* Ejercicio 3: */
/*
Debajo verás una caja, la cual contiene adentro una imagen, 
nos queremos asegurar que esa imagen se
posicione dentro de la cajita roja. Debes cambiar el atributo "position", 
y después ajustar la imagen acorde a la caja.
La caja roja está a 100 píxeles del margen superior y 200 píxeles 
desde la izquierda. El id de la imagen en "ejercicioTres".
*/

/* Acá va tu código */
#ejercicioTres {
     position:relative;
     top: 100px;
     left: 200px; 

}


/* Ejercicio 4: */
/*
La caja azul de abajo se supone que debe ser nuestro header, 
por lo que debe estar fijo en la parte superior izquierda de la página, 
y la posición no debería variar cuando la página sea scrolleada. 
El id de la caja es "ejercicioCuatro". 
Cambia la posición de esa caja a la esquina superior izquierda.
*/

/* Acá va tu código */
#ejercicioCuatro {
    position: fixed; 
    top: 0;
    left: o; 
    z-index: 10; 

}

/* Ejercicio 5: */
/*
En el header hay tres elementos; "Lecciones de posicionamiento", 
el logo de Henry y "#SoyHenry". Usando el id "ejercicioCinco", 
configuraremos este container como "flex box", y nos aseguraremos que 
cada elemento está distanciado de manera proporcional entre unos y otros.
 También queremos que cada elemento aparezca centrado verticalmente 
 en la línea.
*/

/* Acá va tu código */
#ejercicioCinco {
     display: flex;
     justify-content: space-between; 
     align-items: center;

}


/* Ejercicio 6. */
/*
Ahora que los elementos del header están espaciados adecuadamente, 
vemos que quedaron desordenados. "Lecciones de posicionamiento" 
deberían estar a la izquierda, y "#SoyHenry" a la derecha. 
Usando el mismo id que en el ejercicio anterior, cambia la dirección 
en el cual aparecen los elementos.
*/
#ejercicioCinco {
    flex-direction: row-reverse; 
}



/* Ejercicio 7. */
#ejercicioSiete {
    display: flex;
    justify-content: space-between; 
    align-items: center; 
}

#elementoDos {
    display: flex;
    justify-content: space-between;
    align-self: flex-start;
}

#elementoUno {
    display: flex;
    justify-content: space-between;
    align-self: flex-end;
}

#elementoTres {
    display: flex;
    justify-content: space-between;
    align-self: auto;
}


/*
Punto extra 1:
Hay bastantes opciones de flexbox y pueden complicarse, pero a través de 
la prática puedes aprender a ajustar rápidamente el posicionamiento de tus
 elementos con facilidad. Te recomendamos el tutorial "Flexbox Froggy", el
  cual te enseñará en profundidad cómo funciona el elemento de
   posicionamiento "flexbox": Flexbox Froggy
Punto extra 2:
Una nueva y nativa forma de usar las grillas de CSS se está abriendo paso.
 Se llama "css-grid" y puede ser usado para realizar posicionamientos de
  manera aún más rápida y precisa. Es buenos conocer "css-grid", 
  por lo que quizá te venga bien familiarizarte
   ahora: A Complete Guide to CSS Grid Además, 
   de los creadores de "Flexbox Froggy" llega CSS GridGarden.